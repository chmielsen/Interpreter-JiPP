module Abswc_gram where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Prog =
   Program [Instruction]
  deriving (Eq,Ord,Show)

data Instruction =
   DStmt Stmt
 | DDecl Decl
  deriving (Eq,Ord,Show)

data Stmt =
   Assignment Ident Exp
 | FreeExp Exp
 | VPrint Ident
 | IfSe Exp Stmt Stmt
 | BlockS [Instruction]
 | WhileS Exp Stmt
 | FirstS Stmt
 | TailS Stmt
 | SizeS Stmt
 | PopBackS Ident
 | PopFrontS Ident
 | PushBackS Ident Exp
 | PushFrontS Ident Exp
 | RetS Exp
 | EEAdd Ident Exp
 | EESub Ident Exp
 | EEMul Ident Exp
 | EEDiv Ident Exp
  deriving (Eq,Ord,Show)

data Decl =
   NVariable Type Ident
 | NFunctionV Ident [Arg] [Instruction]
 | NFunction Type Ident [Arg] [Instruction]
  deriving (Eq,Ord,Show)

data Type =
   TInt
 | TList Type
  deriving (Eq,Ord,Show)

data Arg =
   Param Type Ident
  deriving (Eq,Ord,Show)

data Exp =
   EOpA Exp Op Exp
 | EOpB Exp Op Exp
 | EOpC Exp Op Exp
 | EOpD Exp Op Exp
 | EOpE Exp Op Exp
 | EVar Ident
 | EInt Integer
 | FunCall Ident [Exp]
 | EInc Ident
 | EDecr Ident
 | ESub Exp
  deriving (Eq,Ord,Show)

data Op =
   OAdd
 | OMult
 | ODiv
 | OSub
 | OLt
 | OGt
 | OEq
 | OAnd
 | OOr
  deriving (Eq,Ord,Show)

